pipeline{
	agent {
		kubernetes{
			cloud "openshift"
			label "db-build"
			yamlFile  "cicd/openshift/pod-kaniko.yaml"		
    }
  }
	parameters{
    string(name: "app", description: "Application Name overrides")
	}
	stages{
		stage('Prepare'){
			steps{
				script{
					env.tag = sh(script: 'git rev-parse --short HEAD', returnStdout: true).trim()
				}
				container('origin'){
					script{
						openshift.withCluster(){
							openshift.withProject(){
								def imagestream = openshift.selector("imagestream/${params.app}-db")
								if(!imagestream.exists()){
									imagestream = openshift.apply([apiVersion: 'v1',kind: 'ImageStream', metadata: [name: "${params.app}-db", labels: [app: "${params.app}" ]]])
								}
								env.repository = imagestream.object().status.dockerImageRepository
								echo "Database image repo: ${env.repository}"
							}
						}
					}
				}
			}
		}
		/*
		stage('Build Image'){
			steps{
				container('docker'){
					sh '''#!/bin/sh
								echo "Building "
                docker login -u $(whoami) -p $(cat /var/run/secrets/kubernetes.io/serviceaccount/token) $DESTINATION
								docker build -t $DESTINATION:$TAG -t $DESTINATION:latest .
                docker push $DESTINATION:$TAG
                docker push $DESTINATION:latest
						 '''
				}
			}
		}*/
		stage('Build Image'){
			steps{
				container('kaniko'){
					script{
						env.registry = env.repository.split('/')[0]
					}
					sh 	"""#!/busybox/sh
								mkdir -pv /kaniko/.docker
								REGISTRY='${env.registry}'
								echo "{\\"auths\\":{\\"$REGISTRY\\":{\\"username\\":\\"openshift\\",\\"password\\":\\"\$(cat /var/run/secrets/kubernetes.io/serviceaccount/token)\\"}}}"} | tee /kaniko/.docker/config.json
								echo 'Building ${env.repository}'
								/kaniko/executor --context='dir://\$(pwd)' --destination=${env.repository}:${env.tag} --verbosity=debug
						"""
				}
			}
		}
		stage('Deploy Image on Openshift'){
			environment{
				REPOSITORY="${params.imageRepository}"
				TAG="${tag}"
			}
			steps{
				container('origin'){
          script{
            openshift.withCluster(){
              openshift.withProject(){
                def applicationName = !params.appOverride? "calculadora":params.appOverride
                def deployment = openshift.selector('dc',[template: 'calculadora-db', app: applicationName])
                if(!deployment.exists()){
                  echo "Deploying application component: database, with Application name: ${applicationName}..."
                  openshift.apply(openshift.process("-f","templates/template.yaml","-p=APP=${applicationName}"))
                  deployment = openshift.selector('dc',[template: 'calculadora-db', app: applicationName])
                }
                def latestVersion = deployment.object().status.latestVersion
                def deploymentName = deployment.object().metadata.name
                echo "Checking application component status: ${latestVersion}..."
                def rc = openshift.selector('rc',"${deploymentName}-${latestVersion}")
                timeout(time:10, unit: 'MINUTES'){
                  rc.untilEach(1){
                    def rcMap = it.object()
                    return (rcMap.status.replicas.equals(rcMap.status.readyReplicas))
                  }
                }
              }
            }
          }
				}
			}
		}
	}
}