pipeline{
	agent {
		kubernetes{
			cloud "openshift"
			label "db-build"
			yaml """
apiVersion: v1
kind: Pod
metadata:
  labels: 
    app: jenkins-ephemeral
spec:
  serviceAccount: jenkins
  volumes:
    - name: docker-credentials
      projected:
        sources:
          - secret:
              name: ${jenkinsDockerSecret}
              items:
                - key: .dockercfg
                  path: config.json
  containers:
    - name: origin
      image: openshift/origin-cli
      command:
        - cat
      tty: true
      resources:
        requests:
          cpu: "100m"
          memory: "32Mi"
        limits:
          cpu: "1000m"
          memory: "512Mi"
      volumeMounts:
        - name: docker-credentials
          mountPath: /.docker
    - name: kaniko
      image: gcr.io/kaniko-project/executor:debug-v0.15.0
      imagePullPolicy: Always
      command:
        - /busybox/cat
      tty: true
      volumeMounts:
        - mountPath: /kaniko/.docker
          name: docker-credentials
      resources:
        requests:
          cpu: "100m"
          memory: "512Mi"
        limits:
          cpu: "2000m"
          memory: "2048Mi"
"""
		}
  }
	parameters{
		string(name: "imageRepository", description: "Container image repository", defaultValue: "docker-registry.default.svc.cluster.local:5000/piloto3/db")
		string(name: "jenkinsDockerSecret", description: "Jenkins Dockercfg Secret")
	}
	stages{
		stage('Prepare'){
			steps{
				script{
					tag = sh(script: 'git rev-parse --short HEAD', returnStdout: true).trim()
				}
			}
		}
		stage('Build Image'){
			environment{
        PATH="/busybox:/kaniko:$PATH"
				DESTINATION="${params.imageRepository}"
				TAG="${tag}"
				CLOUD="${params.cloudName}"
        DOCKER_CONFIG="/kaniko/.docker"
			}
			steps{
				container('kaniko'){
					sh '''#!/busbox/sh
								echo "Building $DESTINATION with user $(whoami)"
                /kaniko/executor --context="dir://`pwd`" --destination=$DESTINATION:$TAG --verbosity=debug
						 '''
				}
			}
		}
		stage('Deploy Image on Openshift'){
			environment{
				REPOSITORY="${params.imageRepository}"
				TAG="${tag}"
			}
			steps{
				container('origin'){
          script{
            openshift.withCluster(){
              openshift.withProject(){
                def deployment = openshift.selector('dc',[template: 'calculadora-db', app: 'db'])
                if(!deployment.exists()){
                  def model = openshift.process('-f','templates/template.yaml',"-p","NAME=db")
                  openshift.apply(model)
                  deployment = openshift.selector('dc',[template: 'calculadora-db', app: 'db'])
                }
              }
            }
          }
				}
			}
		}
	}
}